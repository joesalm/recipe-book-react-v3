{"version":3,"sources":["logo.svg","components/RecipeNavbar.js","pages/HomePage.js","pages/LoginPage.js","components/RecipeCard.js","pages/RecipesPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RecipeNavbar","props","console","log","activeUser","this","handleLogout","recipesMenuItem","Nav","Link","href","loginMenuItem","signupMenuItem","logoutMenuItem","onClick","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","className","Component","HomePage","Jumbotron","Container","LoginPage","state","emailInput","pwdInput","showInvalidCredentials","redirectToRecipes","login","bind","users","handleLogin","userFound","find","user","email","pwd","setState","to","Form","Alert","variant","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","value","onChange","e","target","Button","block","RecipeCard","recipe","Card","Img","src","img","Body","Title","name","Text","desc","RecipesPage","showNewRecipeModal","nameInput","descInput","imgInput","handleModalClose","handleInputChange","handleCreateRecipe","handleFileChange","event","newRecipe","URL","createObjectURL","handleNewRecipe","files","recipes","myRecipesUI","filter","userId","map","key","lg","md","imgURL","fname","Modal","show","onHide","size","Header","closeButton","accept","Image","Footer","App","jsonUsers","jsonRecipes","length","concat","exact","path","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3fb89d90.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap';\n\nclass RecipeNavbar extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        console.log(this.props.activeUser);\n    }\n    \n\n\n    render() {\n\n        const { activeUser, handleLogout } = this.props;\n\n        // rendering the menu items depending on whether we have an active user or not\n        const recipesMenuItem = activeUser ? <Nav.Link href=\"#/recipes\">Recipes</Nav.Link> : null;\n        const loginMenuItem = !activeUser ? <Nav.Link href=\"#/login\">Login</Nav.Link> : null;\n        const signupMenuItem = !activeUser ? <Nav.Link href=\"#/signup\">Signup</Nav.Link> : null;\n        const logoutMenuItem = activeUser ? <Nav.Link onClick={() => {handleLogout()}} href=\"#\">Logout</Nav.Link> : null;\n\n        return (\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#/\">Recipe Book</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        {recipesMenuItem}\n                    </Nav>\n                    <Nav className=\"ml-auto\">\n                        {loginMenuItem}\n                        {signupMenuItem}\n                        {logoutMenuItem}\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}\n\nexport default RecipeNavbar;","import React, { Component } from 'react';\nimport { Container, Jumbotron } from 'react-bootstrap';\nimport RecipeNavbar from '../components/RecipeNavbar';\n\nclass HomePage extends Component {\n\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        const { activeUser, handleLogout } = this.props;\n\n        return (\n            <div>\n                <RecipeNavbar activeUser={activeUser} handleLogout={handleLogout} />\n                <Jumbotron>\n                    <Container>\n                        <h1>Recipe Book</h1>\n                        <p>\n                            Master your recipes\n                      </p>\n                    </Container>\n                </Jumbotron>\n\n            </div>\n        );\n    }\n}\n\nexport default HomePage;","import React, { Component } from 'react';\nimport { Form, Col, Row, Button, Alert } from 'react-bootstrap';\nimport './LoginPage.css'\nimport { Redirect } from 'react-router-dom';\n\nclass LoginPage extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            emailInput: \"john@john.com\",\n            pwdInput: \"123\",\n            showInvalidCredentials: false,\n            redirectToRecipes: false\n        }\n\n        this.login = this.login.bind(this);\n    }\n    \n    login() {\n        const { emailInput, pwdInput } = this.state;\n        const { users, handleLogin } = this.props;\n\n        // Check if the login is valid (if a user with the same \n        // email and pwd was found in the users array)\n        const userFound = users.find(user => emailInput === user.email && pwdInput === user.pwd);\n\n        if (userFound) {\n            // If the login is valid: notify App and redirect to \"/recipes\"\n            handleLogin(userFound);\n            this.setState({\n                redirectToRecipes: true\n            })\n\n        } else {\n            // If the login is not valid: show an error alert\n            this.setState({\n                showInvalidCredentials: true\n            })\n        }\n    }\n\n    render() {\n\n        const { emailInput, pwdInput, showInvalidCredentials, redirectToRecipes } = this.state;\n\n\n        if (redirectToRecipes) {\n            return <Redirect to=\"/recipes\" />\n        }\n\n\n        return (\n            <div className=\"p-login\">\n                <h1>Login to Recipe Book</h1>\n                or <a href=\"#/signup\">create a new account</a>\n                <Form>\n                    {showInvalidCredentials ? <Alert variant=\"danger\">\n                        Invalid Credientails! Incorrect email or password\n                    </Alert> : null}\n                    <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                        <Form.Label column sm={2}>\n                            Email\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control type=\"email\" placeholder=\"Email\" value={emailInput} onChange={(e) => this.setState({emailInput: e.target.value, showInvalidCredentials: false})}/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"formHorizontalPassword\">\n                        <Form.Label column sm={2}>\n                            Password\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control type=\"password\" placeholder=\"Password\" value={pwdInput} onChange={(e) => this.setState({pwdInput: e.target.value, showInvalidCredentials: false})}/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group>\n                            <Button type=\"button\" onClick={this.login} block variant=\"success\">Login</Button>\n                    </Form.Group>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default LoginPage;","import React, { Component } from 'react';\nimport { Card } from 'react-bootstrap';\nimport './RecipeCard.css'\n\nclass RecipeCard extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n    \n\n    render() {\n\n        const { recipe } = this.props;\n\n        return (\n            <Card className=\"c-recipe-card\">\n                <Card.Img variant=\"top\" src={recipe.img} />\n                <Card.Body>\n                    <Card.Title>{recipe.name}</Card.Title>\n                    <Card.Text>\n                        {recipe.desc}\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default RecipeCard;","import React, { Component } from 'react';\nimport RecipeNavbar from '../components/RecipeNavbar';\nimport { Redirect } from 'react-router-dom';\nimport { Container, Col, Row, Button, Modal, Form, Image } from 'react-bootstrap';\nimport RecipeCard from '../components/RecipeCard';\nimport './RecipePage.css'\n\nclass RecipesPage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showNewRecipeModal: false,\n            nameInput: \"\",\n            descInput: \"\",\n            imgInput: null\n        }\n\n        this.handleModalClose = this.handleModalClose.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleCreateRecipe = this.handleCreateRecipe.bind(this);\n        this.handleFileChange = this.handleFileChange.bind(this);\n\n    }\n\n    handleModalClose() {\n        this.setState({\n            showNewRecipeModal: false\n        })\n    }\n\n    handleInputChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    handleCreateRecipe() {\n        const { nameInput, descInput, imgInput } = this.state;\n        const newRecipe = { \n            name: nameInput, \n            desc: descInput, \n            img: URL.createObjectURL(imgInput) \n        };\n        \n        this.props.handleNewRecipe(newRecipe);\n\n        this.handleModalClose();\n    }\n\n    handleFileChange(event) {\n        \n        if (event.target.files[0]) {\n            this.setState({\n                imgInput: event.target.files[0]\n            });\n        } else {\n            this.setState({\n                imgInput: null\n            });\n        }\n    }\n\n    render() {\n        const { activeUser, handleLogout, recipes } = this.props;\n        const { showNewRecipeModal, nameInput, descInput, imgInput } = this.state;\n\n        if (!activeUser) {\n            return <Redirect to=\"/\" />\n        }\n\n        // Filter only me recipes\n        const myRecipes = recipes.filter(recipe => recipe.userId === activeUser.id);\n\n        // Map my recipes to UI\n        const myRecipesUI = myRecipes.map(recipe => <Col key={recipe.id} lg={3} md={4} sm={6}>\n            <RecipeCard recipe={recipe} />\n        </Col>)\n\n        const imgURL = imgInput ? URL.createObjectURL(imgInput) : \"\";\n\n        return (\n            <div className=\"p-recipes\">\n                <RecipeNavbar activeUser={activeUser} handleLogout={handleLogout} />\n                <Container>\n                    <div>\n                        <div className=\"heading\">\n                            <h1>{activeUser.fname}'s Recipes</h1>\n                            <Button onClick={() => this.setState({ showNewRecipeModal: true })}>New Recipe</Button>\n                        </div>\n                        <Row>\n                            {myRecipesUI}\n                        </Row>\n                    </div>\n                </Container>\n\n\n                <Modal show={showNewRecipeModal} onHide={this.handleModalClose} size=\"lg\">\n                    <Modal.Header closeButton>\n                        <Modal.Title>New Recipe</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form>\n                            <Form.Group as={Row} controlId=\"name\">\n                                <Form.Label column sm={2}>\n                                    Name\n                                </Form.Label>\n                                <Col sm={10}>\n                                    {/* the value and name needs to be the same if you want to use a single function for onchange for all inputs */}\n                                    <Form.Control type=\"text\" value={nameInput} name=\"nameInput\" onChange={this.handleInputChange}  />\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row} controlId=\"desc\">\n                                <Form.Label column sm={2}>\n                                    Description\n                                </Form.Label>\n                                <Col sm={10}>\n                                    <Form.Control type=\"text\" value={descInput} name=\"descInput\" onChange={this.handleInputChange}  />\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row} controlId=\"img\">\n                                <Form.Label column sm={2}>\n                                    Image\n                                </Form.Label>\n                                <Col sm={10}>\n                                    <Form.Control type=\"file\" accept=\"image/*\" onChange={this.handleFileChange}  />\n                                </Col>\n                            </Form.Group>\n                            <Image src={imgURL} className=\"preview\"/>\n                        </Form>\n\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleModalClose}>\n                            Cancel\n                        </Button>\n                        <Button variant=\"primary\" onClick={this.handleCreateRecipe}>\n                            Create Recipe\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default RecipesPage;","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport LoginPage from './pages/LoginPage';\nimport RecipesPage from './pages/RecipesPage';\nimport jsonUsers from './data/users.json'\nimport jsonRecipes from './data/recipes.json'\n\n\n// State\n// activeUser - object - a User object containing all the details for the active user.\n//  If there is no active user this state will hold the value of null\n// users - array - an array that contains all the users in the system (this is a HACK\n//   since we don't have a server side)\n// recipes - array - an array that contains all the recipes in the system (this is a HACK\n//   since we don't have a server side)\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      activeUser: null,\n      users: jsonUsers,\n      recipes: jsonRecipes\n    }\n\n    this.handleLogout = this.handleLogout.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleNewRecipe = this.handleNewRecipe.bind(this);\n\n  }\n  \n\n  handleLogin(activeUser) {\n    this.setState({\n      activeUser: activeUser\n    })\n  }\n\n  handleLogout() {\n    this.setState({\n      activeUser: null\n    })\n  }\n\n  handleNewRecipe(recipe) {\n\n    const { activeUser, recipes } = this.state\n\n    // Adding to the recipe object usedId and id\n    recipe.userId = activeUser.id;\n\n    // for id I am taking the id of the last recipe in the array and adding 1\n    recipe.id = recipes[recipes.length - 1].id + 1;\n\n    this.setState({\n      recipes: recipes.concat(recipe)\n    })\n  }\n\n  render() {\n    const { activeUser, users, recipes } = this.state;\n\n    return (\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage activeUser={activeUser} handleLogout={this.handleLogout}/>\n          </Route>\n          <Route exact path=\"/login\">\n            <LoginPage activeUser={activeUser} users={users} handleLogin={this.handleLogin}/>\n          </Route>\n          <Route exact path=\"/recipes\">\n            <RecipesPage activeUser={activeUser} recipes={recipes} handleLogout={this.handleLogout} \n              handleNewRecipe={this.handleNewRecipe}/>\n          </Route>\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}